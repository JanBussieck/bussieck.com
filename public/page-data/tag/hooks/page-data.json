{"componentChunkName":"component---src-templates-tag-js","path":"/tag/hooks/","result":{"data":{"ghostTag":{"slug":"hooks","name":"hooks","visibility":"public","feature_image":null,"description":null,"meta_title":null,"meta_description":null},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5e858c4e0a554e19673f4bf4","title":"Decouple from Redux using Hooks","slug":"decouple-from-redux-using-hooks","featured":false,"feature_image":"http://localhost:2368/content/images/2020/04/react-redux-decouple.png","excerpt":"We can use redux hooks to fully decouple our react components from redux or any state management solution. This leads to cleaner code that is easier to change.","custom_excerpt":"We can use redux hooks to fully decouple our react components from redux or any state management solution. This leads to cleaner code that is easier to change.","visibility":"public","created_at_pretty":"02 April, 2020","published_at_pretty":"03 April, 2020","updated_at_pretty":"03 April, 2020","created_at":"2020-04-02T06:55:10.000+00:00","published_at":"2020-04-03T14:35:44.000+00:00","updated_at":"2020-04-03T20:23:28.000+00:00","meta_title":"Decouple from Redux Using Hooks","meta_description":"We can use redux hooks to fully decouple our react components from redux or any state management solution. This leads to cleaner code that is easier to change.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Jan Bussieck","slug":"jan","bio":null,"profile_image":"//www.gravatar.com/avatar/e056f0b055ea37bd94fdc1664fca6e3d?s=250&d=mm&r=x","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Jan Bussieck","slug":"jan","bio":null,"profile_image":"//www.gravatar.com/avatar/e056f0b055ea37bd94fdc1664fca6e3d?s=250&d=mm&r=x","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"react","slug":"react","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"react","slug":"react","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"redux","slug":"redux","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"hooks","slug":"hooks","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Received wisdom in the react community holds that you should subdivide your\ncomponents into 'smart' containers and 'dumb', presentational components.\n\nThe rationale is to separate concerns. Logic and behavior such as data fetching,\nany interaction with the outside world, dispatching actions and other side\neffects go into our smart container and what our UI should look like as a\nfunction of the resulting data into our dumb component.\n\nThis idea leads to a pervasive pattern of creating container components solely\nfor the purpose of connecting a part of the component tree to the redux store.\nSo we end up with two components; one in a containers folder fetching data from\nthe store and passing down actions and the actual component in the components \nfolder. \n\nTo me, this quickly felt cumbersome and rigid, if I simply wanted a component to\nhave access to a slice of the store, I found myself having to create an\nintermediary container and changing a number of imports in other files that use\nthe component.\n\nI also stopped putting every bit of state into the redux store and instead took\nadvantage of react's new and improved context api to co-locate state\n[https://kentcdodds.com/blog/colocation] that is confined to a specific,\nwell-delineated part of the component tree. This raised questions such as\nwhether consuming context should also only happen inside containers. \n\nBesides, what are we really achieving by this kind of separation? Concerns about\ndata access still has us change a number of files in the component tree and the\nhierarchy of our UI seems to dictate which components should be containers (by\ndefault the top level one).\n\nWhile well-intentioned, the benefit of decoupling UI from state and behavior\ndoes not seem to warrant the overhead and complexity introduced by organizing\nfiles this way.\n\nLuckily, we have a perfect tool to decouple data and behavior from our\npresentational components...\n\nHooks!\n\nAnd wouldn't you know react-redux lets us consume its API only using hooks.\n\nLet's look at a small (and admittedly contrived) example. Say, we want to\nimplement a toggle button and keep the toggle state in the redux store, maybe it\nneeds to be available globally, toggling an app wide setting.\n\nThis is what such a component could look like using redux classico:\n\nimport React from \"react\";\nimport {connect} from \"react-redux\";\nimport {toggleAction} from \"./store/toggleActions\";\n\nconst Toggle = ({on, toggle}) => {\n  return (\n    <button onClick={toggle}>{on ? 'on' : 'off'}</button>\n  );\n};\n\nconst mapStateToProps = state => ({\n  on: state.toggle.on\n});\n\nconst mapDispatchToProps = {toggle: toggleAction};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Toggle);\n\n\nYes, we probably want this to be a container components wrapping a\npresentational component (e.g. a button) simply passing on and toggle down via\nprops, but for the sake of simplicity we're keeping everything in one component.\n\nNow let's refactor this to use the new redux hooks api:\n\nimport React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {toggleAction} from \"./store/toggleActions\";\n\nconst Toggle = () => {\n  const on = useSelector(state => state.toggle.on);\n  const dispatch = useDispatch();\n  return (\n    <button onClick={() => dispatch(toggleAction())}>{on ? 'on' : 'off'}</button>\n  );\n}\n\n\nNot much of an improvement, we reduced some boilerplate, but there is still a\nlot of redux code sitting in our component. \n\nThe beauty of hooks is how composable they are, we can just create a custom \nuseToggle hook:\n\nimport React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {toggleAction} from \"./store/toggleActions\";\n\nconst useToggle = () => {\n  const on = useSelector(state => state.toggle.on);\n  const dispatch = useDispatch();\n  const toggle = () =>  dispatch(toggleAction());\n  return [on, toggle];\n};\n\nconst Toggle = () => {\n  const [on, toggle] = useToggle();\n  return (\n    <button onClick={toggle()}>{on ? 'on' : 'off'}</button>\n  );\n};\n\nNow our component knows nothing about redux, we did not need to create a Toggle \ncontainer or some abstract HOC wrapping our button, we simply use a hook to\nencapsulates the data layer.\n\nThis way our components are also closed to modification, should we decide to\nemploy a different state management solution. Moving redux state into react\ncontext simply involves rewriting the hook (at least for consumers of the\ncontext):\n\nimport ToggleContext from './ToggleContext';\nconst useToggle = () => {\n  const {on, toggle} = useContext(ToggleContext);\n  return [on, toggle];\n};\n\nAs I already alluded to, another disadvantage of the container pattern is that\noften the top-level component ends up being the container that fetches a slice\nof state from the store and passes it down to its children as props.\n\nTake as an example a BookList container component that simply iterate over an\narray of books from the store and renders a BookItem in a list:\n\nimport React from \"react\";\nimport {connect} from \"react-redux\";\n\nconst BookItem = ({title, author}) => {\n  return (\n    <div>\n      <h1>{title}</h1>\n      <h2>{`by ${author}`}</h2>\n    </div>\n  );\n};\n\nconst BookList = ({books}) => {\n  return (\n    <ul>\n      {books.map(({book}) => {\n        return (\n          <li key={book.id}>\n            <BookItem {...book} />\n          <li>\n        );\n      })}\n    </ul>\n  )\n};\n\nconst mapStateToProps = state => ({\n  books: state.books.index\n});\n\nexport default connect(mapStateToProps)(BookList);\n\nA problem we might run into is that, if one book in the list is updated the\nentire list re-render which can quickly turn into an annoying performance issue.\nThat is why it's a good practice to provide data as close to where it is needed\nas possible. \n\nInstead of having to go in and add a BookItem container, we can just create a\ncustom hook.\n\nFirst BookList only receives an array of book ids, which presumably change less\nfrequently than an any particular book:\n\nimport React from \"react\";\nimport {connect} from \"react-redux\";\n\nconst BookList = ({bookIds}) => {\n  return (\n    <ul>\n      {bookIds.map(({bookId}) => {\n        return (\n          <li key={bookId}>\n            <BookItem id={bookId} />\n          <li>\n        )\n      })}\n    </ul>\n  );\n};\n\nconst mapStateToProps = state => ({\n  bookIds: state.books.ids\n});\n\nexport default connect(mapStateToProps)(BookList);\n\nThe BookItem then uses the book id to fetch its data from the store:\n\nimport React from \"react\";\nimport {useSelector} from \"react-redux\";\n\nconst BookItem = ({id}) => {\n  // we would normally pass a selector function here\n  const book = useSelector(state = state.booksById[id]);\n  return (\n    <div>\n      <h1>{book.title}</h1>\n      <h2>{`by ${book.author}`}</h2>\n    </div>\n  );\n};\n\n\nWe can neatly bundle that and even add the action creator for updating a book in\na custom useBook hook:\n\n// src/store/hooks.js\n\nconst useBook = (id) => {\n  const book = useSelector(getBook(id));\n  const dispatch = useDispatch();\n  const update = (...args) => dispatch(updateAction(id, ...args));\n  return [book, update];\n}\n\nDepending on how you structure your react redux projects you can include this\nhook as part of your redux-duck [https://github.com/erikras/ducks-modular-redux] \nor export it alongside actions and selectors inside your redux or store folder.\n\nIt is now easy to import a hook to consume data from our redux right where it is\nneeded profiting from the above mentioned performance gains.\n\nWhat is more, we effectively removed any trace of redux from our components,\ngranted we still need to wrap everything in a Provider, but the overall\nfootprint is vastly reduced. Now, wherever the tempestuous winds of the\njavascript ecosystem may carry you, you have a clean way of interacting with any\nstate management solution you choose in the future given it exposes hooks that\nyou can compose.\n\nIdeally hooks allow all our components to be dumb.","html":"<p>Received wisdom in the react community holds that you should subdivide your components into 'smart' containers and 'dumb', presentational components.</p><p>The rationale is to separate concerns. Logic and behavior such as data fetching, any interaction with the outside world, dispatching actions and other side effects go into our smart container and what our UI should look like as a function of the resulting data into our dumb component.</p><p>This idea leads to a pervasive pattern of creating container components solely for the purpose of connecting a part of the component tree to the redux store. So we end up with two components; one in a <code>containers</code> folder fetching data from the store and passing down actions and the actual component in the <code>components</code> folder. </p><p>To me, this quickly felt cumbersome and rigid, if I simply wanted a component to have access to a slice of the store, I found myself having to create an intermediary container and changing a number of imports in other files that use the component.</p><p>I also stopped putting every bit of state into the redux store and instead took advantage of react's new and improved context api to <a href=\"https://kentcdodds.com/blog/colocation\">co-locate state</a> that is confined to a specific, well-delineated part of the component tree. This raised questions such as whether consuming context should also only happen inside containers. </p><p>Besides, what are we really achieving by this kind of separation? Concerns about data access still has us change a number of files in the component tree and the hierarchy of our UI seems to dictate which components should be containers (by default the top level one).</p><p>While well-intentioned, the benefit of decoupling UI from state and behavior does not seem to warrant the overhead and complexity introduced by organizing files this way.</p><p>Luckily, we have a perfect tool to decouple data and behavior from our presentational components...</p><p>Hooks!</p><p>And wouldn't you know react-redux lets us consume its API only using hooks.</p><p>Let's look at a small (and admittedly contrived) example. Say, we want to implement a toggle button and keep the toggle state in the redux store, maybe it needs to be available globally, toggling an app wide setting.</p><p>This is what such a component could look like using redux classico:</p><pre><code class=\"language-javascript\">import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {toggleAction} from \"./store/toggleActions\";\n\nconst Toggle = ({on, toggle}) =&gt; {\n  return (\n    &lt;button onClick={toggle}&gt;{on ? 'on' : 'off'}&lt;/button&gt;\n  );\n};\n\nconst mapStateToProps = state =&gt; ({\n  on: state.toggle.on\n});\n\nconst mapDispatchToProps = {toggle: toggleAction};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Toggle);\n</code></pre><p>Yes, we probably want this to be a container components wrapping a presentational component (e.g. a button) simply passing <code>on</code> and <code>toggle</code> down via props, but for the sake of simplicity we're keeping everything in one component.</p><p>Now let's refactor this to use the new redux hooks api:</p><pre><code class=\"language-javascript\">import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {toggleAction} from \"./store/toggleActions\";\n\nconst Toggle = () =&gt; {\n  const on = useSelector(state =&gt; state.toggle.on);\n  const dispatch = useDispatch();\n  return (\n    &lt;button onClick={() =&gt; dispatch(toggleAction())}&gt;{on ? 'on' : 'off'}&lt;/button&gt;\n  );\n}\n</code></pre><p>Not much of an improvement, we reduced some boilerplate, but there is still a lot of redux code sitting in our component. </p><p>The beauty of hooks is how composable they are, we can just create a custom <code>useToggle</code> hook:</p><pre><code class=\"language-javascript\">import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {toggleAction} from \"./store/toggleActions\";\n\nconst useToggle = () =&gt; {\n  const on = useSelector(state =&gt; state.toggle.on);\n  const dispatch = useDispatch();\n  const toggle = () =&gt;  dispatch(toggleAction());\n  return [on, toggle];\n};\n\nconst Toggle = () =&gt; {\n  const [on, toggle] = useToggle();\n  return (\n    &lt;button onClick={toggle()}&gt;{on ? 'on' : 'off'}&lt;/button&gt;\n  );\n};</code></pre><p>Now our component knows nothing about redux, we did not need to create a <code>Toggle</code> container or some abstract HOC wrapping our button, we simply use a hook to encapsulates the data layer.</p><p>This way our components are also closed to modification, should we decide to employ a different state management solution. Moving redux state into react context simply involves rewriting the hook (at least for consumers of the context):</p><pre><code class=\"language-javascript\">import ToggleContext from './ToggleContext';\nconst useToggle = () =&gt; {\n  const {on, toggle} = useContext(ToggleContext);\n  return [on, toggle];\n};</code></pre><p>As I already alluded to, another disadvantage of the container pattern is that often the top-level component ends up being the container that fetches a slice of state from the store and passes it down to its children as props.</p><p>Take as an example a <code>BookList</code> container component that simply iterate over an array of books from the store and renders a <code>BookItem</code> in a list:</p><pre><code class=\"language-javascript\">import React from \"react\";\nimport {connect} from \"react-redux\";\n\nconst BookItem = ({title, author}) =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;{title}&lt;/h1&gt;\n      &lt;h2&gt;{`by ${author}`}&lt;/h2&gt;\n    &lt;/div&gt;\n  );\n};\n\nconst BookList = ({books}) =&gt; {\n  return (\n    &lt;ul&gt;\n      {books.map(({book}) =&gt; {\n        return (\n          &lt;li key={book.id}&gt;\n            &lt;BookItem {...book} /&gt;\n          &lt;li&gt;\n        );\n      })}\n    &lt;/ul&gt;\n  )\n};\n\nconst mapStateToProps = state =&gt; ({\n  books: state.books.index\n});\n\nexport default connect(mapStateToProps)(BookList);</code></pre><p>A problem we might run into is that, if one book in the list is updated the entire list re-render which can quickly turn into an annoying performance issue. That is why it's a good practice to provide data as close to where it is needed as possible. </p><p>Instead of having to go in and add a <code>BookItem</code> container, we can just create a custom hook.</p><p>First <code>BookList</code> only receives an array of book ids, which presumably change less frequently than an any particular book:</p><pre><code class=\"language-javascript\">import React from \"react\";\nimport {connect} from \"react-redux\";\n\nconst BookList = ({bookIds}) =&gt; {\n  return (\n    &lt;ul&gt;\n      {bookIds.map(({bookId}) =&gt; {\n        return (\n          &lt;li key={bookId}&gt;\n            &lt;BookItem id={bookId} /&gt;\n          &lt;li&gt;\n        )\n      })}\n    &lt;/ul&gt;\n  );\n};\n\nconst mapStateToProps = state =&gt; ({\n  bookIds: state.books.ids\n});\n\nexport default connect(mapStateToProps)(BookList);</code></pre><p>The <code>BookItem</code> then uses the book id to fetch its data from the store:</p><pre><code class=\"language-javascript\">import React from \"react\";\nimport {useSelector} from \"react-redux\";\n\nconst BookItem = ({id}) =&gt; {\n  // we would normally pass a selector function here\n  const book = useSelector(state = state.booksById[id]);\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;{book.title}&lt;/h1&gt;\n      &lt;h2&gt;{`by ${book.author}`}&lt;/h2&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre><p>We can neatly bundle that and even add the action creator for updating a book in a custom <code>useBook</code> hook:</p><pre><code class=\"language-javascript\">// src/store/hooks.js\n\nconst useBook = (id) =&gt; {\n  const book = useSelector(getBook(id));\n  const dispatch = useDispatch();\n  const update = (...args) =&gt; dispatch(updateAction(id, ...args));\n  return [book, update];\n}</code></pre><p>Depending on how you structure your react redux projects you can include this hook as part of your <a href=\"https://github.com/erikras/ducks-modular-redux\">redux-duck</a> or export it alongside actions and selectors inside your <code>redux</code> or <code>store</code> folder.</p><p>It is now easy to import a hook to consume data from our redux right where it is needed profiting from the above mentioned performance gains.</p><p>What is more, we effectively removed any trace of redux from our components, granted we still need to wrap everything in a <code>Provider</code>, but the overall footprint is vastly reduced. Now, wherever the tempestuous winds of the javascript ecosystem may carry you, you have a clean way of interacting with any state management solution you choose in the future given it exposes hooks that you can compose.</p><p>Ideally hooks allow all our components to be dumb.</p>","url":"http://localhost:2368/decouple-from-redux-using-hooks/","canonical_url":null,"uuid":"b6b74a4c-0336-435f-af43-f5b1fd829ae5","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5e858c4e0a554e19673f4bf4","reading_time":5}}]}},"pageContext":{"slug":"hooks","limit":12,"skip":0,"numberOfPages":1,"humanPageNumber":1,"prevPageNumber":null,"nextPageNumber":null,"previousPagePath":null,"nextPagePath":null}}}